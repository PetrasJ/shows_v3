<?php

namespace App\Repository;

use App\Entity\UserShow;
use Doctrine\ORM\EntityRepository;

/**
 * ItemsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserShowRepository extends EntityRepository
{
    /**
     * @param $userID
     * @param string $status
     * @return array
     */
    public function getShows($userID, $status = UserShow::STATUS_WATCHING)
    {
        if ($status == UserShow::STATUS_WATCHING) {
            $ignore = [UserShow::STATUS_ARCHIVED, UserShow::STATUS_WATCH_LATER];
            $result = $this->createQueryBuilder('p')
                ->where('p.userID = :userID')
                ->setParameter('userID', $userID)
                ->andWhere('p.status is NULL')
                ->orWhere('p.status NOT IN (:status)')
                ->setParameter('status', array_values($ignore))
                ->getQuery()
                ->getResult();
        } elseif ($status == UserShow::STATUS_ARCHIVED) {
            $result = $this->createQueryBuilder('p')
                ->where('p.userID = :userID')
                ->setParameter('userID', $userID)
                ->andWhere('p.status = :status')
                ->setParameter('status', UserShow::STATUS_ARCHIVED)
                ->getQuery()
                ->getResult();
        } elseif ($status == UserShow::STATUS_WATCH_LATER) {
            $result = $this->createQueryBuilder('p')
                ->where('p.userID = :userID')
                ->setParameter('userID', $userID)
                ->andWhere('p.status = :status')
                ->setParameter('status', UserShow::STATUS_WATCH_LATER)
                ->getQuery()
                ->getResult();
        } else {
            $result = $this->createQueryBuilder('p')
                ->where('p.userID = :userID')
                ->setParameter('userID', $userID)
                ->getQuery()
                ->getResult();
        }

        return array_map(function($userShow) {return $userShow->getShow();}, $result);
    }

    /**
     * @return array
     */
    public function getAllUsersShows()
    {
        $result = $this->createQueryBuilder('p')
            ->select('p')
            ->groupBy('p.show')
            ->getQuery()
            ->getResult();

        return array_map(function($userShow) {return $userShow->getShow()->getId();}, $result);
    }
}
